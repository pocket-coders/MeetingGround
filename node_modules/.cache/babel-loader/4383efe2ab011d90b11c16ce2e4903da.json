{"ast":null,"code":"var _jsxFileName = \"/Users/talbachar/Desktop/MeetingGround/src/server/server.tsx\";\n// yarn add @types/express --save\n// npm install nodemon -g\n// yarn add @types/graphql express-graphql\n// npm install apollo-server-express --save     -> not needed anymore\n// npm install react-apollo\n// run with nodemon server\n//import express from \"express\";\nimport React from \"react\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\"; // yarn add react-apollo\n// yarn add apollo-client\n// yarn add @apollo/client graphql\n// yarn add apollo-cache-inmemory\n// yarn add apollo-boost\n// const { graphqlExpress, graphiqlExpress } = require(\"apollo-server-express\");\n// const { graphqlHTTP } = require(\"express-graphql\");\n// const express = require(\"express\");\n// const _ = require(\"lodash\");\n// const server = express();\n// const hosts = [\n//   {\n//     email: \"123@123.com\",\n//     firstname: \"qwerty\",\n//     lastname: \"asdfg\",\n//   },\n//   {\n//     email: \"456@456.com\",\n//     firstname: \"azerty\",\n//     lastname: \"zxcvbn\",\n//   },\n//   {\n//     email: \"789@789.com\",\n//     firstname: \"compu\",\n//     lastname: \"scien\",\n//   },\n// ];\n// const links = [\n//   { link: \"asdfghjk\", email: \"123@123.com\", duration: 15 },\n//   { link: \"doifjsad\", email: \"123@123.com\", duration: 30 },\n//   { link: \"jsdfoiewf\", email: \"123@123.com\", duration: 60 },\n//   { link: \"werdfg\", email: \"456@456.com\", duration: 15 },\n//   { link: \"asd\", email: \"456@456.com\", duration: 30 },\n//   { link: \"234sdf\", email: \"456@456.com\", duration: 60 },\n//   { link: \"jsdfo1234iewf\", email: \"789@789.com\", duration: 15 },\n//   { link: \"jsdfo12345iewf\", email: \"789@789.com\", duration: 30 },\n//   { link: \"hggffj\", email: \"789@789.com\", duration: 60 },\n// ];\n// const {\n//   GraphQLObjectType,\n//   GraphQLString,\n//   GraphQLList,\n//   GraphQLNonNull,\n//   GraphQLSchema,\n//   GraphQLInt,\n// } = require(\"graphql\");\n// const HostType = new GraphQLObjectType({\n//   name: \"Host\",\n//   fields: () => ({\n//     email: {\n//       type: GraphQLNonNull(GraphQLString),\n//     },\n//     firstname: {\n//       type: GraphQLNonNull(GraphQLString),\n//     },\n//     lastname: {\n//       type: GraphQLNonNull(GraphQLString),\n//     },\n//     links: {\n//       type: new GraphQLList(LinkType),\n//       description: \"List of all Links\",\n//       resolve: (host: any) => {\n//         return links.filter((link) => link.email === host.email);\n//       },\n//     },\n//   }),\n// });\n// const LinkType = new GraphQLObjectType({\n//   name: \"Link\",\n//   description: \"this is a single link for a host\",\n//   fields: () => ({\n//     email: {\n//       type: GraphQLNonNull(GraphQLString),\n//     },\n//     duration: {\n//       type: GraphQLNonNull(GraphQLInt),\n//     },\n//     link: {\n//       type: GraphQLNonNull(GraphQLString),\n//     },\n//   }),\n// });\n// const RootQuery = new GraphQLObjectType({\n//   name: \"RootQueryType\",\n//   fields: {\n//     host: {\n//       type: new GraphQLList(HostType),\n//       resolve: () => hosts,\n//       //   args: {\n//       //     email: {\n//       //       type: GraphQLNonNull(GraphQLString),\n//       //     },\n//       //   },\n//       //   resolve(parent, agrs) {\n//       //     // code to get the result from the db\n//       //     //hosts.find((host) => host.email === this.args.email);\n//       //   },\n//     },\n//   },\n// });\n// const schema = new GraphQLSchema({\n//   query: RootQuery,\n// });\n// server.use(\n//   \"/graphql\",\n//   graphqlHTTP({\n//     graphiql: true,\n//     schema: schema,\n//   })\n// );\n// // server.use(\n// //   \"/graphiql\",\n// //   graphiqlExpress({\n// //     endpointURL: \"/graphql\",\n// //   })\n// // );\n// // server.use(\"/graphql\", graphqlExpress({}));\n// server.listen(4000, () => {\n//   console.log(\"now listening for request on port 4000\");\n// });\n// ______________________\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: \"http://localhost:4000/graphql\" //   fetchOptions: {\n  //     mode: \"no-cors\",\n  //   },\n\n});\nconst client = new ApolloClient({\n  cache,\n  link\n}); // Mistake #1: I should not have to know another language to write a query\n\nconst GET_ALL_HOSTS = gql`\n  query {\n    host {\n      email\n      firstname\n      lastname\n    }\n  }\n`; // Mistake #2: I should not have to repeat the description of a type\n\nfunction List() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_ALL_HOSTS);\n  console.log(\"run check\");\n  return loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }\n  }, \"loading\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, \"An Error occured\") : /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, data.host.map(host => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, host.email, \" used by \", host.firstname, \" \", host.lastname)));\n}\n\nfunction Server() {\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Server;","map":{"version":3,"sources":["/Users/talbachar/Desktop/MeetingGround/src/server/server.tsx"],"names":["React","ApolloClient","InMemoryCache","HttpLink","ApolloProvider","useQuery","gql","cache","link","uri","client","GET_ALL_HOSTS","List","loading","error","data","console","log","host","map","email","firstname","lastname","Server"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAiC,OAAjC;AAGA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAAqD,uBAArD;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApaAAJ,EAAd;AAEA,MAAMM,IAAI,GAAG,IAAIL,QAAJ,CAAa;AACxBM,EAAAA,GAAG,EAAE,+BADmB,CAExB;AACA;AACA;;AAJwB,CAAb,CAAb;AAOA,MAAMC,MAA2C,GAAG,IAAIT,YAAJ,CAAiB;AACnEM,EAAAA,KADmE;AAEnEC,EAAAA;AAFmE,CAAjB,CAApD,C,CAKA;;AACA,MAAMG,aAAa,GAAGL,GAAI;;;;;;;;CAA1B,C,CAUA;;AAQA,SAASM,IAAT,GAAgB;AACd,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BV,QAAQ,CAACM,aAAD,CAAzC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,SAAOJ,OAAO,gBACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADY,GAEVC,KAAK,gBACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADO,gBAGP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACG,IAAL,CAAUC,GAAV,CAAeD,IAAD,iBACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IAAI,CAACE,KADR,eACwBF,IAAI,CAACG,SAD7B,OACyCH,IAAI,CAACI,QAD9C,CADD,CADH,CALF;AAaD;;AAED,SAASC,MAAT,GAAkB;AAChB,sBACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEb,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAea,MAAf","sourcesContent":["// yarn add @types/express --save\n// npm install nodemon -g\n// yarn add @types/graphql express-graphql\n// npm install apollo-server-express --save     -> not needed anymore\n// npm install react-apollo\n// run with nodemon server\n//import express from \"express\";\n\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\n\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n// yarn add react-apollo\n// yarn add apollo-client\n// yarn add @apollo/client graphql\n// yarn add apollo-cache-inmemory\n// yarn add apollo-boost\n\n// const { graphqlExpress, graphiqlExpress } = require(\"apollo-server-express\");\n// const { graphqlHTTP } = require(\"express-graphql\");\n// const express = require(\"express\");\n// const _ = require(\"lodash\");\n\n// const server = express();\n\n// const hosts = [\n//   {\n//     email: \"123@123.com\",\n//     firstname: \"qwerty\",\n//     lastname: \"asdfg\",\n//   },\n//   {\n//     email: \"456@456.com\",\n//     firstname: \"azerty\",\n//     lastname: \"zxcvbn\",\n//   },\n//   {\n//     email: \"789@789.com\",\n//     firstname: \"compu\",\n//     lastname: \"scien\",\n//   },\n// ];\n\n// const links = [\n//   { link: \"asdfghjk\", email: \"123@123.com\", duration: 15 },\n//   { link: \"doifjsad\", email: \"123@123.com\", duration: 30 },\n//   { link: \"jsdfoiewf\", email: \"123@123.com\", duration: 60 },\n//   { link: \"werdfg\", email: \"456@456.com\", duration: 15 },\n//   { link: \"asd\", email: \"456@456.com\", duration: 30 },\n//   { link: \"234sdf\", email: \"456@456.com\", duration: 60 },\n//   { link: \"jsdfo1234iewf\", email: \"789@789.com\", duration: 15 },\n//   { link: \"jsdfo12345iewf\", email: \"789@789.com\", duration: 30 },\n//   { link: \"hggffj\", email: \"789@789.com\", duration: 60 },\n// ];\n\n// const {\n//   GraphQLObjectType,\n//   GraphQLString,\n//   GraphQLList,\n//   GraphQLNonNull,\n//   GraphQLSchema,\n//   GraphQLInt,\n// } = require(\"graphql\");\n\n// const HostType = new GraphQLObjectType({\n//   name: \"Host\",\n//   fields: () => ({\n//     email: {\n//       type: GraphQLNonNull(GraphQLString),\n//     },\n//     firstname: {\n//       type: GraphQLNonNull(GraphQLString),\n//     },\n//     lastname: {\n//       type: GraphQLNonNull(GraphQLString),\n//     },\n//     links: {\n//       type: new GraphQLList(LinkType),\n//       description: \"List of all Links\",\n//       resolve: (host: any) => {\n//         return links.filter((link) => link.email === host.email);\n//       },\n//     },\n//   }),\n// });\n\n// const LinkType = new GraphQLObjectType({\n//   name: \"Link\",\n//   description: \"this is a single link for a host\",\n//   fields: () => ({\n//     email: {\n//       type: GraphQLNonNull(GraphQLString),\n//     },\n//     duration: {\n//       type: GraphQLNonNull(GraphQLInt),\n//     },\n//     link: {\n//       type: GraphQLNonNull(GraphQLString),\n//     },\n//   }),\n// });\n\n// const RootQuery = new GraphQLObjectType({\n//   name: \"RootQueryType\",\n//   fields: {\n//     host: {\n//       type: new GraphQLList(HostType),\n//       resolve: () => hosts,\n//       //   args: {\n//       //     email: {\n//       //       type: GraphQLNonNull(GraphQLString),\n//       //     },\n//       //   },\n//       //   resolve(parent, agrs) {\n//       //     // code to get the result from the db\n//       //     //hosts.find((host) => host.email === this.args.email);\n//       //   },\n//     },\n//   },\n// });\n\n// const schema = new GraphQLSchema({\n//   query: RootQuery,\n// });\n\n// server.use(\n//   \"/graphql\",\n//   graphqlHTTP({\n//     graphiql: true,\n//     schema: schema,\n//   })\n// );\n\n// // server.use(\n// //   \"/graphiql\",\n// //   graphiqlExpress({\n// //     endpointURL: \"/graphql\",\n// //   })\n// // );\n\n// // server.use(\"/graphql\", graphqlExpress({}));\n\n// server.listen(4000, () => {\n//   console.log(\"now listening for request on port 4000\");\n// });\n\n// ______________________\n\nconst cache = new InMemoryCache();\n\nconst link = new HttpLink({\n  uri: \"http://localhost:4000/graphql\",\n  //   fetchOptions: {\n  //     mode: \"no-cors\",\n  //   },\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link,\n});\n\n// Mistake #1: I should not have to know another language to write a query\nconst GET_ALL_HOSTS = gql`\n  query {\n    host {\n      email\n      firstname\n      lastname\n    }\n  }\n`;\n\n// Mistake #2: I should not have to repeat the description of a type\ntype Host = {\n  // Mistake #3: The type is wrong here, and that should be caught at compile-time\n  email: string;\n  firstname: string;\n  lastname: string;\n};\n\nfunction List() {\n  const { loading, error, data } = useQuery(GET_ALL_HOSTS);\n  console.log(\"run check\");\n  return loading ? (\n    <div>loading</div>\n  ) : error ? (\n    <div>An Error occured</div>\n  ) : (\n    <ul>\n      {data.host.map((host: Host) => (\n        <li>\n          {host.email} used by {host.firstname} {host.lastname}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Server() {\n  return (\n    <ApolloProvider client={client}>\n      <List />\n    </ApolloProvider>\n  );\n}\n\nexport default Server;\n"]},"metadata":{},"sourceType":"module"}