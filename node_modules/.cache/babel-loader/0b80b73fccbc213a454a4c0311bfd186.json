{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { ApolloError } from 'apollo-client';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport { useApolloClient } from './ApolloContext';\nimport { SSRContext } from './internal/SSRContext';\nimport actHack from './internal/actHack';\nimport { getCachedObservableQuery, invalidateCachedObservableQuery } from './queryCache';\nimport { compact, objToKey } from './utils';\nexport function useQuery(query, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr,\n      _ref$skip = _ref.skip,\n      skip = _ref$skip === void 0 ? false : _ref$skip,\n      _ref$suspend = _ref.suspend,\n      suspend = _ref$suspend === void 0 ? false : _ref$suspend,\n      pollInterval = _ref.pollInterval,\n      _ref$notifyOnNetworkS = _ref.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _ref$notifyOnNetworkS === void 0 ? false : _ref$notifyOnNetworkS,\n      overrideClient = _ref.client,\n      context = _ref.context,\n      metadata = _ref.metadata,\n      variables = _ref.variables,\n      actualCachePolicy = _ref.fetchPolicy,\n      errorPolicy = _ref.errorPolicy,\n      fetchResults = _ref.fetchResults;\n\n  var client = useApolloClient(overrideClient);\n  var ssrManager = useContext(SSRContext);\n  var ssrInUse = ssr && ssrManager; // Skips when `skip: true` or SSRContext passed but `ssr: false`\n\n  var shouldSkip = skip || ssrManager != null && !ssr;\n  var fetchPolicy = ssrInUse && ( // Taken from https://github.com/apollographql/react-apollo/blob/2d7e48b7d0c26e792e1ed26e98bb84d8fba5bb8a/src/Query.tsx#L167-L169\n  actualCachePolicy === 'network-only' || actualCachePolicy === 'cache-and-network') ? 'cache-first' : actualCachePolicy;\n  var watchQueryOptions = useMemo(function () {\n    return compact({\n      context: context,\n      errorPolicy: errorPolicy,\n      fetchPolicy: fetchPolicy,\n      fetchResults: fetchResults,\n      metadata: metadata,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      pollInterval: pollInterval,\n      query: query,\n      variables: variables\n    });\n  }, [query, pollInterval, notifyOnNetworkStatusChange, context && objToKey(context), metadata && objToKey(metadata), variables && objToKey(variables), fetchPolicy, errorPolicy, fetchResults]);\n  var observableQuery = useMemo(function () {\n    return getCachedObservableQuery(client, watchQueryOptions);\n  }, [client, watchQueryOptions]);\n\n  var _useState = useState(0),\n      responseId = _useState[0],\n      setResponseId = _useState[1];\n\n  var currentResult = useMemo(function () {\n    var helpers = {\n      fetchMore: observableQuery.fetchMore.bind(observableQuery),\n      refetch: observableQuery.refetch.bind(observableQuery),\n      startPolling: observableQuery.startPolling.bind(observableQuery),\n      stopPolling: observableQuery.stopPolling.bind(observableQuery),\n      updateQuery: observableQuery.updateQuery.bind(observableQuery)\n    };\n    var result = observableQuery.getCurrentResult(); // return the old result data when there is an error\n\n    var data = result.data;\n\n    if (result.error || result.errors) {\n      data = _extends({}, result.data, {}, (observableQuery.getLastResult() || {}).data);\n    }\n\n    if (shouldSkip) {\n      // Taken from https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/Query.tsx#L376-L381\n      return _extends({}, helpers, {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: undefined\n      });\n    }\n\n    return _extends({}, helpers, {\n      data: data,\n      error: result.errors && result.errors.length > 0 ? new ApolloError({\n        graphQLErrors: result.errors\n      }) : result.error,\n      errors: result.errors,\n      loading: result.loading,\n      // don't try to return `networkStatus` when suspense it's used\n      // because it's unreliable in that case\n      // https://github.com/trojanowski/react-apollo-hooks/pull/68\n      networkStatus: suspend ? undefined : result.networkStatus,\n      partial: result.partial,\n      stale: result.stale\n    });\n  }, [shouldSkip, responseId, observableQuery]);\n  useEffect(function () {\n    if (shouldSkip) {\n      return;\n    }\n\n    var invalidateCurrentResult = function invalidateCurrentResult() {\n      // A hack to get rid React warnings during tests. The default\n      // implementation of `actHack` just invokes the callback immediately.\n      // In tests, it's replaced with `act` from react-testing-library.\n      // A better solution welcome.\n      actHack(function () {\n        setResponseId(function (x) {\n          return x + 1;\n        });\n      });\n    };\n\n    var subscription = observableQuery.subscribe(invalidateCurrentResult, invalidateCurrentResult);\n    invalidateCachedObservableQuery(client, watchQueryOptions);\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [shouldSkip, observableQuery]);\n  ensureSupportedFetchPolicy(suspend, fetchPolicy);\n\n  if (currentResult.partial) {\n    if (suspend) {\n      // throw a promise - use the react suspense to wait until the data is\n      // available\n      throw observableQuery.result();\n    }\n\n    if (ssrInUse) {\n      ssrManager.register(observableQuery.result());\n    }\n  }\n\n  return currentResult;\n}\n\nfunction ensureSupportedFetchPolicy(suspend, fetchPolicy) {\n  if (suspend && fetchPolicy && fetchPolicy !== 'cache-first') {\n    throw new Error(\"Fetch policy \" + fetchPolicy + \" is not supported without 'suspend: false'\");\n  }\n}","map":{"version":3,"sources":["/Users/talbachar/Desktop/MeetingGround/node_modules/react-apollo-hooks/es/useQuery.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","ApolloError","useContext","useEffect","useMemo","useState","useApolloClient","SSRContext","actHack","getCachedObservableQuery","invalidateCachedObservableQuery","compact","objToKey","useQuery","query","_temp","_ref","_ref$ssr","ssr","_ref$skip","skip","_ref$suspend","suspend","pollInterval","_ref$notifyOnNetworkS","notifyOnNetworkStatusChange","overrideClient","client","context","metadata","variables","actualCachePolicy","fetchPolicy","errorPolicy","fetchResults","ssrManager","ssrInUse","shouldSkip","watchQueryOptions","observableQuery","_useState","responseId","setResponseId","currentResult","helpers","fetchMore","bind","refetch","startPolling","stopPolling","updateQuery","result","getCurrentResult","data","error","errors","getLastResult","undefined","loading","networkStatus","graphQLErrors","partial","stale","invalidateCurrentResult","x","subscription","subscribe","unsubscribe","ensureSupportedFetchPolicy","register","Error"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ApolloError } from 'apollo-client';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport { useApolloClient } from './ApolloContext';\nimport { SSRContext } from './internal/SSRContext';\nimport actHack from './internal/actHack';\nimport { getCachedObservableQuery, invalidateCachedObservableQuery } from './queryCache';\nimport { compact, objToKey } from './utils';\nexport function useQuery(query, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr,\n      _ref$skip = _ref.skip,\n      skip = _ref$skip === void 0 ? false : _ref$skip,\n      _ref$suspend = _ref.suspend,\n      suspend = _ref$suspend === void 0 ? false : _ref$suspend,\n      pollInterval = _ref.pollInterval,\n      _ref$notifyOnNetworkS = _ref.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _ref$notifyOnNetworkS === void 0 ? false : _ref$notifyOnNetworkS,\n      overrideClient = _ref.client,\n      context = _ref.context,\n      metadata = _ref.metadata,\n      variables = _ref.variables,\n      actualCachePolicy = _ref.fetchPolicy,\n      errorPolicy = _ref.errorPolicy,\n      fetchResults = _ref.fetchResults;\n\n  var client = useApolloClient(overrideClient);\n  var ssrManager = useContext(SSRContext);\n  var ssrInUse = ssr && ssrManager; // Skips when `skip: true` or SSRContext passed but `ssr: false`\n\n  var shouldSkip = skip || ssrManager != null && !ssr;\n  var fetchPolicy = ssrInUse && ( // Taken from https://github.com/apollographql/react-apollo/blob/2d7e48b7d0c26e792e1ed26e98bb84d8fba5bb8a/src/Query.tsx#L167-L169\n  actualCachePolicy === 'network-only' || actualCachePolicy === 'cache-and-network') ? 'cache-first' : actualCachePolicy;\n  var watchQueryOptions = useMemo(function () {\n    return compact({\n      context: context,\n      errorPolicy: errorPolicy,\n      fetchPolicy: fetchPolicy,\n      fetchResults: fetchResults,\n      metadata: metadata,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      pollInterval: pollInterval,\n      query: query,\n      variables: variables\n    });\n  }, [query, pollInterval, notifyOnNetworkStatusChange, context && objToKey(context), metadata && objToKey(metadata), variables && objToKey(variables), fetchPolicy, errorPolicy, fetchResults]);\n  var observableQuery = useMemo(function () {\n    return getCachedObservableQuery(client, watchQueryOptions);\n  }, [client, watchQueryOptions]);\n\n  var _useState = useState(0),\n      responseId = _useState[0],\n      setResponseId = _useState[1];\n\n  var currentResult = useMemo(function () {\n    var helpers = {\n      fetchMore: observableQuery.fetchMore.bind(observableQuery),\n      refetch: observableQuery.refetch.bind(observableQuery),\n      startPolling: observableQuery.startPolling.bind(observableQuery),\n      stopPolling: observableQuery.stopPolling.bind(observableQuery),\n      updateQuery: observableQuery.updateQuery.bind(observableQuery)\n    };\n    var result = observableQuery.getCurrentResult(); // return the old result data when there is an error\n\n    var data = result.data;\n\n    if (result.error || result.errors) {\n      data = _extends({}, result.data, {}, (observableQuery.getLastResult() || {}).data);\n    }\n\n    if (shouldSkip) {\n      // Taken from https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/Query.tsx#L376-L381\n      return _extends({}, helpers, {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: undefined\n      });\n    }\n\n    return _extends({}, helpers, {\n      data: data,\n      error: result.errors && result.errors.length > 0 ? new ApolloError({\n        graphQLErrors: result.errors\n      }) : result.error,\n      errors: result.errors,\n      loading: result.loading,\n      // don't try to return `networkStatus` when suspense it's used\n      // because it's unreliable in that case\n      // https://github.com/trojanowski/react-apollo-hooks/pull/68\n      networkStatus: suspend ? undefined : result.networkStatus,\n      partial: result.partial,\n      stale: result.stale\n    });\n  }, [shouldSkip, responseId, observableQuery]);\n  useEffect(function () {\n    if (shouldSkip) {\n      return;\n    }\n\n    var invalidateCurrentResult = function invalidateCurrentResult() {\n      // A hack to get rid React warnings during tests. The default\n      // implementation of `actHack` just invokes the callback immediately.\n      // In tests, it's replaced with `act` from react-testing-library.\n      // A better solution welcome.\n      actHack(function () {\n        setResponseId(function (x) {\n          return x + 1;\n        });\n      });\n    };\n\n    var subscription = observableQuery.subscribe(invalidateCurrentResult, invalidateCurrentResult);\n    invalidateCachedObservableQuery(client, watchQueryOptions);\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [shouldSkip, observableQuery]);\n  ensureSupportedFetchPolicy(suspend, fetchPolicy);\n\n  if (currentResult.partial) {\n    if (suspend) {\n      // throw a promise - use the react suspense to wait until the data is\n      // available\n      throw observableQuery.result();\n    }\n\n    if (ssrInUse) {\n      ssrManager.register(observableQuery.result());\n    }\n  }\n\n  return currentResult;\n}\n\nfunction ensureSupportedFetchPolicy(suspend, fetchPolicy) {\n  if (suspend && fetchPolicy && fetchPolicy !== 'cache-first') {\n    throw new Error(\"Fetch policy \" + fetchPolicy + \" is not supported without 'suspend: false'\");\n  }\n}"]},"metadata":{},"sourceType":"module"}