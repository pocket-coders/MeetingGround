{"ast":null,"code":"import React, { useContext } from 'react';\nvar ApolloContext = React.createContext(null);\nexport function ApolloProvider(_ref) {\n  var client = _ref.client,\n      children = _ref.children;\n  return React.createElement(ApolloContext.Provider, {\n    value: client\n  }, children);\n}\nexport function useApolloClient(overrideClient) {\n  var client = useContext(ApolloContext); // Ensures that the number of hooks called from one render to another remains\n  // constant, despite the Apollo client read from context being swapped for\n  // one passed directly as prop.\n\n  if (overrideClient) {\n    return overrideClient;\n  }\n\n  if (!client) {\n    // https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/component-utils.tsx#L19-L22\n    throw new Error('Could not find \"client\" in the context or passed in as a prop. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via props.');\n  }\n\n  return client;\n}","map":{"version":3,"sources":["/Users/talbachar/Desktop/MeetingGround/node_modules/react-apollo-hooks/es/ApolloContext.js"],"names":["React","useContext","ApolloContext","createContext","ApolloProvider","_ref","client","children","createElement","Provider","value","useApolloClient","overrideClient","Error"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,IAAIC,aAAa,GAAGF,KAAK,CAACG,aAAN,CAAoB,IAApB,CAApB;AACA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AACnC,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,QAAQ,GAAGF,IAAI,CAACE,QADpB;AAEA,SAAOP,KAAK,CAACQ,aAAN,CAAoBN,aAAa,CAACO,QAAlC,EAA4C;AACjDC,IAAAA,KAAK,EAAEJ;AAD0C,GAA5C,EAEJC,QAFI,CAAP;AAGD;AACD,OAAO,SAASI,eAAT,CAAyBC,cAAzB,EAAyC;AAC9C,MAAIN,MAAM,GAAGL,UAAU,CAACC,aAAD,CAAvB,CAD8C,CACN;AACxC;AACA;;AAEA,MAAIU,cAAJ,EAAoB;AAClB,WAAOA,cAAP;AACD;;AAED,MAAI,CAACN,MAAL,EAAa;AACX;AACA,UAAM,IAAIO,KAAJ,CAAU,oEAAoE,6DAApE,GAAoI,qCAA9I,CAAN;AACD;;AAED,SAAOP,MAAP;AACD","sourcesContent":["import React, { useContext } from 'react';\nvar ApolloContext = React.createContext(null);\nexport function ApolloProvider(_ref) {\n  var client = _ref.client,\n      children = _ref.children;\n  return React.createElement(ApolloContext.Provider, {\n    value: client\n  }, children);\n}\nexport function useApolloClient(overrideClient) {\n  var client = useContext(ApolloContext); // Ensures that the number of hooks called from one render to another remains\n  // constant, despite the Apollo client read from context being swapped for\n  // one passed directly as prop.\n\n  if (overrideClient) {\n    return overrideClient;\n  }\n\n  if (!client) {\n    // https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/component-utils.tsx#L19-L22\n    throw new Error('Could not find \"client\" in the context or passed in as a prop. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via props.');\n  }\n\n  return client;\n}"]},"metadata":{},"sourceType":"module"}