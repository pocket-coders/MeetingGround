{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { ApolloError } from 'apollo-client';\nimport React from 'react';\nimport { useApolloClient } from './ApolloContext';\nimport actHack from './internal/actHack';\nimport { objToKey } from './utils';\n\nvar getInitialState = function getInitialState() {\n  return {\n    called: false,\n    data: undefined,\n    error: undefined,\n    hasError: false,\n    loading: false\n  };\n};\n\nexport function useMutation(mutation, baseOptions) {\n  if (baseOptions === void 0) {\n    baseOptions = {};\n  }\n\n  var client = useApolloClient(baseOptions.client);\n\n  var _React$useState = React.useState(getInitialState),\n      result = _React$useState[0],\n      setResult = _React$useState[1];\n\n  var _baseOptions = baseOptions,\n      _baseOptions$rethrow = _baseOptions.rethrow,\n      rethrow = _baseOptions$rethrow === void 0 ? true : _baseOptions$rethrow,\n      options = _objectWithoutPropertiesLoose(_baseOptions, [\"rethrow\"]);\n\n  var mergeResult = function mergeResult(partialResult) {\n    // A hack to get rid React warnings during tests.\n    actHack(function () {\n      setResult(function (prev) {\n        return _extends({}, prev, {}, partialResult);\n      });\n    });\n  }; // reset state if client instance changes\n\n\n  React.useEffect(function () {\n    mergeResult(getInitialState());\n  }, [client]);\n\n  var _useMutationTracking = useMutationTracking(),\n      generateNewMutationId = _useMutationTracking.generateNewMutationId,\n      isMostRecentMutation = _useMutationTracking.isMostRecentMutation;\n\n  var onMutationStart = function onMutationStart() {\n    if (!result.loading) {\n      mergeResult({\n        called: true,\n        data: undefined,\n        error: undefined,\n        hasError: false,\n        loading: true\n      });\n    }\n  };\n\n  var onMutationError = function onMutationError(error, mutationId) {\n    if (isMostRecentMutation(mutationId)) {\n      mergeResult({\n        error: error,\n        hasError: true,\n        loading: false\n      });\n    }\n  };\n\n  var onMutationCompleted = function onMutationCompleted(response, mutationId) {\n    var data = response.data,\n        errors = response.errors;\n\n    if (errors && errors.length > 0) {\n      onMutationError(new ApolloError({\n        graphQLErrors: errors\n      }), mutationId);\n      return;\n    }\n\n    if (isMostRecentMutation(mutationId)) {\n      mergeResult({\n        data: data,\n        loading: false\n      });\n    }\n  };\n\n  var runMutation = React.useCallback(function (mutateOptions) {\n    if (mutateOptions === void 0) {\n      mutateOptions = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      onMutationStart();\n      var mutationId = generateNewMutationId(); // merge together variables from baseOptions (if specified)\n      // and the execution\n\n      var mutateVariables = options.variables ? _extends({}, mutateOptions.variables, {}, options.variables) : mutateOptions.variables;\n      client.mutate(_extends({\n        mutation: mutation\n      }, options, {}, mutateOptions, {\n        variables: mutateVariables\n      })).then(function (response) {\n        onMutationCompleted(response, mutationId);\n        resolve(response);\n      })[\"catch\"](function (err) {\n        onMutationError(err, mutationId);\n\n        if (rethrow) {\n          reject(err);\n          return;\n        }\n\n        resolve({});\n      });\n    });\n  }, [client, mutation, objToKey(baseOptions)]);\n  return [runMutation, result];\n}\n\nfunction useMutationTracking() {\n  var mostRecentMutationId = React.useRef(0);\n\n  var generateNewMutationId = function generateNewMutationId() {\n    mostRecentMutationId.current += 1;\n    return mostRecentMutationId.current;\n  };\n\n  var isMostRecentMutation = function isMostRecentMutation(mutationId) {\n    return mostRecentMutationId.current === mutationId;\n  };\n\n  return {\n    generateNewMutationId: generateNewMutationId,\n    isMostRecentMutation: isMostRecentMutation\n  };\n}","map":{"version":3,"sources":["/Users/talbachar/Desktop/MeetingGround/node_modules/react-apollo-hooks/es/useMutation.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","ApolloError","React","useApolloClient","actHack","objToKey","getInitialState","called","data","undefined","error","hasError","loading","useMutation","mutation","baseOptions","client","_React$useState","useState","result","setResult","_baseOptions","_baseOptions$rethrow","rethrow","options","mergeResult","partialResult","prev","useEffect","_useMutationTracking","useMutationTracking","generateNewMutationId","isMostRecentMutation","onMutationStart","onMutationError","mutationId","onMutationCompleted","response","errors","graphQLErrors","runMutation","useCallback","mutateOptions","Promise","resolve","reject","mutateVariables","variables","mutate","then","err","mostRecentMutationId","useRef","current"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { ApolloError } from 'apollo-client';\nimport React from 'react';\nimport { useApolloClient } from './ApolloContext';\nimport actHack from './internal/actHack';\nimport { objToKey } from './utils';\n\nvar getInitialState = function getInitialState() {\n  return {\n    called: false,\n    data: undefined,\n    error: undefined,\n    hasError: false,\n    loading: false\n  };\n};\n\nexport function useMutation(mutation, baseOptions) {\n  if (baseOptions === void 0) {\n    baseOptions = {};\n  }\n\n  var client = useApolloClient(baseOptions.client);\n\n  var _React$useState = React.useState(getInitialState),\n      result = _React$useState[0],\n      setResult = _React$useState[1];\n\n  var _baseOptions = baseOptions,\n      _baseOptions$rethrow = _baseOptions.rethrow,\n      rethrow = _baseOptions$rethrow === void 0 ? true : _baseOptions$rethrow,\n      options = _objectWithoutPropertiesLoose(_baseOptions, [\"rethrow\"]);\n\n  var mergeResult = function mergeResult(partialResult) {\n    // A hack to get rid React warnings during tests.\n    actHack(function () {\n      setResult(function (prev) {\n        return _extends({}, prev, {}, partialResult);\n      });\n    });\n  }; // reset state if client instance changes\n\n\n  React.useEffect(function () {\n    mergeResult(getInitialState());\n  }, [client]);\n\n  var _useMutationTracking = useMutationTracking(),\n      generateNewMutationId = _useMutationTracking.generateNewMutationId,\n      isMostRecentMutation = _useMutationTracking.isMostRecentMutation;\n\n  var onMutationStart = function onMutationStart() {\n    if (!result.loading) {\n      mergeResult({\n        called: true,\n        data: undefined,\n        error: undefined,\n        hasError: false,\n        loading: true\n      });\n    }\n  };\n\n  var onMutationError = function onMutationError(error, mutationId) {\n    if (isMostRecentMutation(mutationId)) {\n      mergeResult({\n        error: error,\n        hasError: true,\n        loading: false\n      });\n    }\n  };\n\n  var onMutationCompleted = function onMutationCompleted(response, mutationId) {\n    var data = response.data,\n        errors = response.errors;\n\n    if (errors && errors.length > 0) {\n      onMutationError(new ApolloError({\n        graphQLErrors: errors\n      }), mutationId);\n      return;\n    }\n\n    if (isMostRecentMutation(mutationId)) {\n      mergeResult({\n        data: data,\n        loading: false\n      });\n    }\n  };\n\n  var runMutation = React.useCallback(function (mutateOptions) {\n    if (mutateOptions === void 0) {\n      mutateOptions = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      onMutationStart();\n      var mutationId = generateNewMutationId(); // merge together variables from baseOptions (if specified)\n      // and the execution\n\n      var mutateVariables = options.variables ? _extends({}, mutateOptions.variables, {}, options.variables) : mutateOptions.variables;\n      client.mutate(_extends({\n        mutation: mutation\n      }, options, {}, mutateOptions, {\n        variables: mutateVariables\n      })).then(function (response) {\n        onMutationCompleted(response, mutationId);\n        resolve(response);\n      })[\"catch\"](function (err) {\n        onMutationError(err, mutationId);\n\n        if (rethrow) {\n          reject(err);\n          return;\n        }\n\n        resolve({});\n      });\n    });\n  }, [client, mutation, objToKey(baseOptions)]);\n  return [runMutation, result];\n}\n\nfunction useMutationTracking() {\n  var mostRecentMutationId = React.useRef(0);\n\n  var generateNewMutationId = function generateNewMutationId() {\n    mostRecentMutationId.current += 1;\n    return mostRecentMutationId.current;\n  };\n\n  var isMostRecentMutation = function isMostRecentMutation(mutationId) {\n    return mostRecentMutationId.current === mutationId;\n  };\n\n  return {\n    generateNewMutationId: generateNewMutationId,\n    isMostRecentMutation: isMostRecentMutation\n  };\n}"]},"metadata":{},"sourceType":"module"}